/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/brokers/applications/list-applications": {
    /**
     * Finds applications belonging to a broker 
     * @description Fetches the applications that the broker has submitted.  The applications are optionally filtered by date via the query string parameters, and by the status of the task being pending or complete.
     */
    get: operations["BrokerApplicationsListController_find"];
  };
  "/brokers/current-user": {
    /**
     * Fetches the current user's information if their token is valid 
     * @description Fetches the information stached in the user's JWT token to expose that information to clients
     */
    get: operations["BrokerCurrentUserController_find"];
  };
  "/brokers/sign-in": {
    /**
     * Authenticates a broker 
     * @description Brokers can create a session token using their email and password.  Their accounts must be active.
     */
    post: operations["BrokerSignInController_post"];
  };
  "/brokers/tasks/list-tasks": {
    /**
     * Finds applications belonging to a broker 
     * @description Uses various querystring parameters to filter the applications associated with a broker
     */
    get: operations["BrokerTasksListController_find"];
  };
  "/brokers/tasks/update-task": {
    /**
     * Updates a task with an uploaded file 
     * @description Uploads a file and if specified as completed sets the task to the review status
     */
    patch: operations["BrokerTasksUpdateController_update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    ApplicationStatus: "submitted" | "under_review" | "cancelled" | "funded" | "repaid";
    ApplicationActiveStatus: components["schemas"]["ApplicationStatus"][];
    BrokerApplicationDto: {
      /** @description The primary key for the row */
      id: number;
      /** @description The applicant's name */
      applicantName: string;
      /** @description The incoming property address */
      incomingAddress: string;
      /** @description The loan amount in dollars */
      loanAmount: number;
      /** @description The duration of the loan in months */
      loanDuration: number;
      /** @description The outgoing property address */
      outgoingAddress: string;
      /** @description The application status in progress/on hold/etc */
      status: components["schemas"]["ApplicationStatus"] | components["schemas"]["ApplicationActiveStatus"];
      /**
       * Format: date-time 
       * @description The date the row was created
       */
      createdAt: string;
      applicationId: string;
    };
    BrokerApplicationsListResponseDto: {
      /** @description Success status indicating the request completed */
      success: Record<string, never>;
      applications: (components["schemas"]["BrokerApplicationDto"])[];
    };
    BrokerApplicationsPostResponseDto: {
      success: Record<string, never>;
      loanAmountMessage: Record<string, never>;
    };
    BrokerApplicationsListBadRequestResponseDto: {
      /**
       * @description Failure message and reason 
       * @enum {string}
       */
      message: "invalid-minimum-date-error" | "invalid-maximum-date-error" | "minimum-exceeds-maximum-date-error";
    };
    InternalServerErrorResponseDto: {
      /**
       * @description The error code 
       * @enum {string}
       */
      message: "internal-server-error";
    };
    BrokerCurrentUserDto: {
      /** @description The primary key for the row */
      id: number;
      /** @description The broker's email address */
      email: string;
      /** @description The broker's first name */
      firstName: string;
      /** @description The broker's last name */
      lastName: string;
      /** @description The broker's mobile phone number */
      mobilePhoneNumber: string;
      /**
       * Format: date-time 
       * @description The date the row was created
       */
      createdAt: string;
    };
    BrokerCurrentUserResponseDto: {
      /** @description Success status indicating the request completed */
      success: Record<string, never>;
      broker: components["schemas"]["BrokerCurrentUserDto"];
    };
    BrokerSignInBodyDto: {
      /** @description Account email address for the broker */
      email: string;
      /** @description Account password for the broker */
      password: string;
    };
    BrokerSignInResponseDto: {
      /** @description Success status indicating the request completed */
      success: Record<string, never>;
      /** @description The session token */
      token: string;
    };
    BrokerSignInBadRequestResponseDto: {
      /**
       * @description Failure message and reason 
       * @enum {string}
       */
      message: "email-not-found-error" | "invalid-password-error" | "account-not-active-error";
    };
    /** @enum {string} */
    TaskStatus: "pending" | "cancelled" | "review_required" | "completed";
    BrokerTask: {
      /** @description The primary key for the row */
      id: number;
      /** @description The status of the task */
      status: components["schemas"]["TaskStatus"];
      /** @description The title of the task */
      title: string;
      /**
       * Format: date-time 
       * @description The date the row was created
       */
      createdAt: string;
    };
    BrokerTasksListResponseDto: {
      /** @description Success status indicating the request completed */
      success: Record<string, never>;
      tasks: (components["schemas"]["BrokerTask"])[];
    };
    BrokerTasksListBrokerApplicationsListBadRequestResponseDto: {
      /**
       * @description Failure message and reason 
       * @enum {string}
       */
      message: "invalid-minimum-date-error" | "invalid-maximum-date-error" | "minimum-exceeds-maximum-date-error";
    };
    BrokerTasksUpdateBodyDto: {
      /** @description The uploaded file as a base64 string */
      file: string;
      /** @description Flag to complete the task when all files are uploaded */
      complete?: boolean;
    };
    BrokerTasksUpdateResponseDto: {
      /** @description Success status indicating the request completed */
      success: Record<string, never>;
    };
    BrokerTasksUpdateBadRequestResponseDto: {
      /**
       * @description The error code 
       * @enum {string}
       */
      message: "internal-server-error" | "invalid-user-error" | "task-not-found-error" | "task-submitted-error" | "task-uploads-exceeded-error";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Finds applications belonging to a broker 
   * @description Fetches the applications that the broker has submitted.  The applications are optionally filtered by date via the query string parameters, and by the status of the task being pending or complete.
   */
  BrokerApplicationsListController_find: {
    parameters: {
      query: {
        /** @description Optional flag for application status */
        status?: components["schemas"]["ApplicationStatus"] | components["schemas"]["ApplicationStatus"][];
        /** @description Optional flag for applications with incomplete tasks */
        completed?: "pending" | "cancelled" | "review_required" | "completed";
        /** @description Minimum date for the application submission */
        minimumDate?: string;
        /** @description Maximum date for the application submission */
        maximumDate?: string;
      };
      payload: {

      }
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BrokerApplicationsListResponseDto"];
        };
      };
      /**
       * @description 
       * | Response message    | Description          |
       * | ------------------- | -------------------- |
       */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerApplicationsListBadRequestResponseDto"];
        };
      };
      /** @description Returns `internal-server-error` when the result could not be computed */
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Fetches the current user's information if their token is valid 
   * @description Fetches the information stached in the user's JWT token to expose that information to clients
   */
  BrokerCurrentUserController_find: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BrokerCurrentUserResponseDto"];
        };
      };
      /** @description Returns `internal-server-error` when the result could not be computed */
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Authenticates a broker 
   * @description Brokers can create a session token using their email and password.  Their accounts must be active.
   */
  BrokerSignInController_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrokerSignInBodyDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BrokerSignInResponseDto"];
        };
      };
      /**
       * @description 
       * | Response message    | Description          |
       * | ------------------- | -------------------- |
       */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerSignInBadRequestResponseDto"];
        };
      };
      /** @description Returns `internal-server-error` when the result could not be computed */
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Finds applications belonging to a broker 
   * @description Uses various querystring parameters to filter the applications associated with a broker
   */
  BrokerTasksListController_find: {
    parameters: {
      query: {
        /** @description Optional flag for task status */
        status?: components["schemas"]["TaskStatus"];
        /** @description Minimum date for the task due date */
        minimumDateDue?: string;
        /** @description Maximum date for the task due date */
        maximumDateDue?: string;
        /** @description Minimum date for the task completion date */
        minimumDateCompleted?: string;
        /** @description Maximum date for the task completion date */
        maximumDateCompleted?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BrokerTasksListResponseDto"];
        };
      };
      /**
       * @description 
       * | Response message    | Description          |
       * | ------------------- | -------------------- |
       */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerTasksListBrokerApplicationsListBadRequestResponseDto"];
        };
      };
      /** @description Returns `internal-server-error` when the result could not be computed */
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Updates a task with an uploaded file 
   * @description Uploads a file and if specified as completed sets the task to the review status
   */
  BrokerTasksUpdateController_update: {
    parameters: {
      query: {
        /** @description The task id */
        taskId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrokerTasksUpdateBodyDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BrokerTasksUpdateResponseDto"];
        };
      };
      /**
       * @description 
       * | Response message    | Description          |
       * | ------------------- | -------------------- |
       */
      400: {
        content: {
          "application/json": components["schemas"]["BrokerTasksUpdateBadRequestResponseDto"];
        };
      };
      /** @description Returns `internal-server-error` when the result could not be computed */
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponseDto"];
        };
      };
    };
  };
}
